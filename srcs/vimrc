let @a = $HOME . "/vimrc_repo/srcs/"
let @t = $HOME . "/vimrc_repo/templates/"
let @e = expand('%:e')

"srcs holds all the includes (.vim)
let srcs = [
  \"stdheader.vim",
  \"wolf3d.vim",
  \"c.vim",
  \"cpp.vim"
  \]

for src in srcs
	exec "source " . @a . src
endfor

syntax on
set number
set norelativenumber
set wrap
set matchtime=10
set ruler
set cc=80
set tabstop=4
set shiftwidth=4
set autoindent
set smartindent
"Make the current line highlighted"
hi CursorLine term=none cterm=none ctermbg=0

let mapleader = ","
let maplocalleader = "\\"

"space will select a word in visual mode"
noremap <space> viwye<right>

"put a whole line down"
noremap - ddp

"put a whole line up"
noremap _ ddkkp

"Y behaves like D"
noremap Y y$

"L goes to the end of line"
noremap L $

"H goes to the stard of line"
noremap H 0

"delete line in insert mode with ctrl-d"
inoremap <c-d> <esc>ddi

"upper case current world in normal mode with ctrl-u"
nnoremap <c-u> viwUe

"clear current line"
nnoremap cc O<esc>jddk

"go down with a brand new line"
inoremap <c-s> <esc>o

"go to .vimrc"
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

"include vimrc"
nnoremap <leader>sv :source $MYVIMRC<cr>

nnoremap " viw<esc>a"<esc>bi"<esc>lel
nnoremap ( viw<esc>a)<esc>bi(<esc>lel

iabbrev ii int i;<esc>o
iabbrev cc char c;<esc>o
iabbrev c* char *str;<esc>o

vnoremap " <esc>`<i"<esc>`>a"<esc>l

"inoremap jk <esc>

"inoremap <up> <nop>
"inoremap <right> <nop>
"inoremap <left> <nop>
"inoremap <esc> <nop>

"nnoremap <right> <nop>
"nnoremap <up> <nop>
"nnoremap <right> <nop>
"nnoremap <down> <nop>

nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

function Eatchar(pat)
	let c = nr2char(getchar(0))
	return (c =~ a:pat) ? '' : c
endfunction

augroup filetype_c
	autocmd BufNewFile *.c :call Skeleton_c()
	autocmd BufNewFile *.h :call Skeleton_h()
	autocmd FileType c :nnoremap <S-m> :call Main_c()<CR>
	autocmd FileType c :nnoremap <leader>c I//<esc>
	autocmd FileType c :iabbrev <silent> icc <esc>:call Include_perso_c()<CR><C-R>=Eatchar('\s')<CR>
	autocmd FileType c :iabbrev <silent> ics <esc>:call Include_sys_c()<CR><C-R>=Eatchar('\s')<CR>
	autocmd FileType h :iabbrev <silent> icc <esc>:call Include_perso_c()<CR><C-R>=Eatchar('\s')<CR>
	autocmd FileType h :iabbrev <silent> ics <esc>:call Include_sys_c()<CR><C-R>=Eatchar('\s')<CR>
	autocmd FileType c :iabbrev <silent> rett return ();<Left><Left><C-R>=Eatchar('\s')<CR>
	autocmd FileType c :iabbrev <silent> iff if ()<Left><C-R>=Eatchar('\s')<CR>
	autocmd FileType c :iabbrev <silent> eliff else if ()<Left><C-R>=Eatchar('\s')<CR>
augroup END

augroup filetype_cpp
	autocmd BufNewFile [A-Z]*.cpp :call Skeleton_cpp_class()
	autocmd BufNewFile [A-Z]*.hpp :call Skeleton_hpp_class()
	autocmd FileType cpp :nnoremap <S-m> :call Main_c()<CR>
	autocmd FileType cpp :nnoremap <leader>c I//<esc>
	autocmd FileType hpp :iabbrev <silent> icc <esc>:call Include_perso_cpp()<CR><C-R>=Eatchar('\s')<CR>
	autocmd FileType hpp :iabbrev <silent> ics <esc>:call Include_sys_cpp()<CR><C-R>=Eatchar('\s')<CR>
	autocmd FileType cpp :iabbrev <silent> icc <esc>:call Include_perso_cpp()<CR><C-R>=Eatchar('\s')<CR>
	autocmd FileType cpp :iabbrev <silent> ics <esc>:call Include_sys_cpp()<CR><C-R>=Eatchar('\s')<CR>
	autocmd FileType cpp :iabbrev <silent> rett return ();<Left><Left><C-R>=Eatchar('\s')<CR>
	autocmd FileType cpp :iabbrev <silent> iff if ()<Left><C-R>=Eatchar('\s')<CR>
	autocmd FileType cpp :iabbrev <silent> eliff else if ()<Left><C-R>=Eatchar('\s')<CR>
augroup END

