let @a = $HOME . "/vimrc_repo/srcs/"
let @b = $HOME . "/vimrc_repo"

"srcs holds all the includes (.vim)
let srcs = [
  \"stdheader.vim",
  \"wolf3d.vim",
  \"c.vim",
  \"cpp.vim"
  \]

for src in srcs
	exec "source " . @a . src
endfor

syntax on
set number
set norelativenumber
set wrap
set matchtime=10
set ruler
set cc=80
set cul
"Make the current line highlighted"
hi CursorLine term=none cterm=none ctermbg=0

let mapleader = ","
let maplocalleader = "\\"

function Is_new_file()
	let myfile = expand('%:p')
	if filereadable(myfile)
		return 0
	else
		return 1
	endif
endfunction

function Skeletons()
	if (Is_new_file())
		let extension = expand('%:e')
		if (extension == "hpp")
			call Skeleton_hpp()
		elseif (extension == "h")
			call Skeleton_h()
		elseif (extension == "cpp")
			call Skeleton_cpp()
		elseif (extension == "c")
			call Skeleton_c()
		endif
	endif
endfunction

function LineDown()
	execute "normal! ddp"
	echo "lol"
endfunction

"space will select a word in visual mode"
noremap <space> viwye<right>

"put a whole line down"
noremap - ddp

"put a whole line up"
noremap _ ddkkp

"Y behaves like D"
noremap Y y$

"L goes to the end of line"
noremap L $

"H goes to the stard of line"
noremap H 0

"delete line in insert mode with ctrl-d"
inoremap <c-d> <esc>ddi

"upper case current world in normal mode with ctrl-u"
nnoremap <c-u> viwUe

"clear current line"
nnoremap cc O<esc>jddk

"go down with a brand new line"
inoremap <c-s> <esc>o

"go to .vimrc"
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

"include vimrc"
nnoremap <leader>sv :source $MYVIMRC<cr>

nnoremap " viw<esc>a"<esc>bi"<esc>lel
nnoremap ( viw<esc>a)<esc>bi(<esc>lel

iabbrev ldd ldedier@student.42.fr
iabbrev ii int i;<esc>o
iabbrev cc char c;<esc>o
iabbrev c* char *str;<esc>o

vnoremap " <esc>`<i"<esc>`>a"<esc>l

silent call Skeletons()

